// Happy Jumping OFX DCTL CUDA

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001f)
DEFINE_UI_PARAMS(PARAM1, Track, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(PARAM2, Zoom, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(HUE, Hue, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001f)
DEFINE_UI_PARAMS(SAT, Sat, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001f)
DEFINE_UI_PARAMS(LUM, Lum, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001f)

typedef struct {
float2 r0, r1;
} mat2;

typedef struct {
float3 r0, r1, r2;
} mat3;

#if (__RESOLVE_VER_MAJOR__ < 17)
__DEVICE__ float _floorf( float A) {
return (float)_floor(A);
}
#endif

__DEVICE__ float href = 0.0f;
__DEVICE__ float hsha = 0.0f;
__DEVICE__ float iTime = 0.0f;

__DEVICE__ float _fract( float A) {
return A - _floorf(A);
}

__DEVICE__ float2 _cosf2( float2 A) {
return make_float2(_cosf(A.x), _cosf(A.y));
}

__DEVICE__ float3 _cosf3( float3 A) {
return make_float3(_cosf(A.x), _cosf(A.y), _cosf(A.z));
}

__DEVICE__ float3 _sinf3( float3 A) {
return make_float3(_sinf(A.x), _sinf(A.y), _sinf(A.z));
}

__DEVICE__ float3 _clampf3( float3 in, float clampMin, float clampMax) {
float3 out;
out.x = _clampf( in.x, clampMin, clampMax); out.y = _clampf( in.y, clampMin, clampMax); out.z = _clampf( in.z, clampMin, clampMax);
return out;
}

__DEVICE__ float3 _fmaxf3( float3 in, float Min) {
float3 out;
out.x = _fmaxf(in.x, Min); out.y = _fmaxf(in.y, Min); out.z = _fmaxf(in.z, Min);
return out;
}

__DEVICE__ mat2 make_mat2( float A1, float A2, float B1, float B2) {
mat2 C;
C.r0 = make_float2(A1, A2);
C.r1 = make_float2(B1, B2);
return C;
}

__DEVICE__ mat3 make_mat3_f3( float3 A, float3 B, float3 C) {
mat3 D;
D.r0 = A; D.r1 = B; D.r2 = C;
return D;
}

__DEVICE__ float2 multi_f2_f22( float2 A, mat2 B) {
float2 C;
C.x = A.x * B.r0.x + A.y * B.r0.y;
C.y = A.x * B.r1.x + A.y * B.r1.y;
return C;
}

__DEVICE__ float2 multi_f22_f2( mat2 B, float2 A) {
float2 C;
C.x = A.x * B.r0.x + A.y * B.r0.y;
C.y = A.x * B.r1.x + A.y * B.r1.y;
return C;
}

__DEVICE__ float3 multi_f3_f33( float3 A, mat3 B)
{
float3 C;
C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z; 
C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z; 
C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
return C;
}

__DEVICE__ float3 _powf3( float3 in, float3 pw) {
float3 out;
out.x = _powf( in.x, pw.x); out.y = _powf( in.y, pw.y); out.z = _powf( in.z, pw.z);
return out;
}

__DEVICE__ float3 _powf3_f( float3 in, float pw) {
float3 out;
out.x = _powf( in.x, pw); out.y = _powf( in.y, pw); out.z = _powf( in.z, pw);
return out;
}

__DEVICE__ float _sign( float A) {
return (A < 0.0f ? -1.0f : A > 0.0f ? 1.0f : 0.0f);
}

__DEVICE__ float2 Rotate( float ax, float ay, float b) {
float AX = ax; float AY = ay;
float c = _cosf(b); float s = _sinf(b);
ax = AX * c + AY * s; ay = AX * -s + AY * c;
return make_float2(ax, ay);
}

__DEVICE__ float3 RGB_to_HSV( float3 RGB) {
float3 HSV;
float min = _fminf(_fminf(RGB.x, RGB.y), RGB.z);
float max = _fmaxf(_fmaxf(RGB.x, RGB.y), RGB.z);
HSV.z = max;
float delta = max - min;
if (max != 0.0f) {
HSV.y = delta / max;
} else {
HSV.y = 0.0f;
HSV.x = 0.0f;
return HSV;
}
if (delta == 0.0f) {
HSV.x = 0.0f;
} else if (RGB.x == max) {
HSV.x = (RGB.y - RGB.z) / delta;
} else if (RGB.y == max) {
HSV.x = 2.0f + (RGB.z - RGB.x) / delta;
} else {
HSV.x = 4.0f + (RGB.x - RGB.y) / delta;
}
HSV.x *= 1.0f / 6.0f;
if (HSV.x < 0.0f)
HSV.x += 1.0f;
return HSV;
}

__DEVICE__ float3 HSV_to_RGB(float3 HSV) {
float3 RGB;
if (HSV.y == 0.0f) {
RGB.x = RGB.y = RGB.z = HSV.z;
} else {
HSV.x *= 6.0f;
float i = _floorf(HSV.x);
float f = HSV.x - i;
i = i >= 0.0f ? _fmod(i, 6.0f) : _fmod(i, 6.0f) + 6.0f;
float p = HSV.z * (1.0f - HSV.y);
float q = HSV.z * (1.0f - HSV.y * f);
float t = HSV.z * (1.0f - HSV.y * (1.0f - f));
RGB.x = i == 0.0f ? HSV.z : i == 1.0f ? q : i == 2.0f ? p : i == 3.0f ? p : i == 4.0f ? t : HSV.z;
RGB.y = i == 0.0f ? t : i == 1 ? HSV.z : i == 2.0f ? HSV.z : i == 3.0f ? q : i == 4.0f ? p : p;
RGB.z = i == 0.0f ? p : i == 1 ? p : i == 2.0f ? t : i == 3.0f ? HSV.z : i == 4.0f ? HSV.z : q;
}
return RGB;
}

__DEVICE__ float smin( float a, float b, float k ) {
float h = _fmaxf(k - _fabs(a - b), 0.0f);
return _fminf(a, b) - h * h * 0.25f / k;
}

__DEVICE__ float2 smin2( float2 a, float2 b, float k ) {
float h = _clampf(0.5f + 0.5f * (b.x - a.x) / k, 0.0f, 1.0f);
return _mix(b, a, h) - k * h * (1.0f - h);
}

__DEVICE__ float smax( float a, float b, float k ) {
float h = _fmaxf(k - _fabs(a - b), 0.0f);
return _fmaxf(a, b) + h * h * 0.25f / k;
}

__DEVICE__ float sdSphere( float3 p, float s ) {
return length(p) - s;
}

__DEVICE__ float sdEllipsoid( float3 p, float3 r ) {
float k0 = length(p / r);
float k1 = length(p / (r * r));
return k0 * (k0 - 1.0f) / k1;
}

__DEVICE__ float2 sdStick(float3 p, float3 a, float3 b, float r1, float r2) {
float3 pa = p - a, ba = b - a;
float h = _clampf(dot(pa, ba) / dot(ba, ba), 0.0f, 1.0f);
return make_float2(length(pa - ba * h) - _mix(r1, r2, h * h * (3.0f - 2.0 * h)), h );
}

__DEVICE__ float4 opU( float4 d1, float4 d2 ) {
return (d1.x < d2.x) ? d1 : d2;
}

__DEVICE__ float4 map( float3 pos, float atime ) {
hsha = 1.0f;

float t1 = _fract(atime);
float t4 = _fabs(_fract(atime * 0.5f) - 0.5f) / 0.5f;

float p = 4.0f * t1 * (1.0f - t1);
float pp = 4.0f * (1.0f - 2.0f * t1);

float3 cen = make_float3( 0.5f * (-1.0f + 2.0f * t4), _powf(p, 2.0f - p) + 0.1f, _floorf(atime) + _powf(t1, 0.7f) -1.0f );

float2 uu = normalize(make_float2(1.0f, -pp ));
float2 vv = make_float2(-uu.y, uu.x);

float sy = 0.5f + 0.5f * p;
float compress = 1.0f - smoothstep(0.0f, 0.4f, p);
sy = sy * (1.0f - compress) + compress;
float sz = 1.0f / sy;

float3 q = pos - cen;
float rot = -0.25f * (-1.0f + 2.0f * t4);
float2 qyx = Rotate(q.y, q.x, rot);
q.y = qyx.x;
q.x = qyx.y;
float3 r = q;
href = q.y;
float2 qyz = make_float2(q.y, q.z);
q.y = dot(uu, qyz);
q.z = dot(vv, qyz);

float4 res = make_float4( sdEllipsoid( q, make_float3(0.25f, 0.25f * sy, 0.25f * sz) ), 2.0f, 0.0f, 1.0f );

if( res.x - 1.0f < pos.y )
{
float t2 = _fract(atime + 0.8f);
float p2 = 0.5f - 0.5f * _cosf(6.2831f * t2);
r.z += 0.05f - 0.2f * p2;
r.y += 0.2f * sy - 0.2f;
float3 sq = make_float3( _fabs(r.x), r.y, r.z );

float3 h = r;
float hr = _sinf(0.791f * atime);
hr = 0.7f * _sign(hr) * smoothstep(0.5f, 0.7f, _fabs(hr));
float2 hzx = Rotate(h.z, h.x, hr);
h.z = hzx.x;
h.x = hzx.y;

float3 hq = make_float3( _fabs(h.x), h.y, h.z );
float d  = sdEllipsoid( h - make_float3(0.0f, 0.2f, 0.02f), make_float3(0.08f, 0.2f, 0.15f) );
float d2 = sdEllipsoid( h - make_float3(0.0f, 0.21f, -0.1f), make_float3(0.2f, 0.2f, 0.2f) );
d = smin( d, d2, 0.1f );
res.x = smin( res.x, d, 0.1f );

{
float yy = r.y - 0.02f - 2.5f * r.x * r.x;
res.x += 0.001f * _sinf(yy * 120.0f) * (1.0f - smoothstep(0.0f, 0.1f, _fabs(yy)));
}

{
float2 arms = sdStick( sq, make_float3(0.18f - 0.06f * hr * _sign(r.x), 0.2f, -0.05f), make_float3(0.3f + 0.1f * p2, -0.2f + 0.3f * p2, -0.15f), 0.03f, 0.06f );
float2 resxz = make_float2(res.x, res.z);
resxz = smin2( resxz, arms, 0.01f + 0.04f * (1.0f - arms.y) * (1.0f - arms.y) * (1.0f - arms.y) );
res.x = resxz.x;
res.z = resxz.y;
}

{
float t3 = _fract(atime + 0.9f);
float p3 = 4.0f * t3 * (1.0f - t3);
float2 ear = sdStick( hq, make_float3(0.15f, 0.32f, -0.05f), make_float3(0.2f + 0.05f * p3, 0.2f + 0.2f * p3, -0.07f), 0.01f, 0.04f );
float2 resxz = make_float2(res.x, res.z);
resxz = smin2(resxz, ear, 0.01f );
res.x = resxz.x;
res.z = resxz.y;
}

{
d = sdEllipsoid( h - make_float3(0.0f, 0.15f + 4.0f * hq.x * hq.x, 0.15f), make_float3(0.1f, 0.04f, 0.2f) );
res.w = 0.3f + 0.7f * _clampf( d * 150.0f, 0.0f, 1.0f);
res.x = smax( res.x, -d, 0.03f );
}

{
float t6 = _cosf(6.2831f * (atime * 0.5f + 0.25f));
float ccc = _cosf(1.57f * t6 * _sign(r.x));
float sss = _sinf(1.57f * t6 * _sign(r.x));
float3 base = make_float3(0.12f, -0.07f, -0.1f);
base.y -= 0.1f / sy;
float2 legs = sdStick( sq, base, base + make_float3(0.2f, -ccc, sss) * 0.2f, 0.04f, 0.07f );
float2 resxz = make_float2(res.x, res.z);
resxz = smin2( resxz, legs, 0.07f );
res.x = resxz.x;
res.z = resxz.y;
}

{
float blink = _powf(0.5f + 0.5f * _sinf(2.1f * iTime), 20.0f);
float eyeball = sdSphere(hq - make_float3(0.08f, 0.27f, 0.06f), 0.065f + 0.02f * blink);
res.x = smin( res.x, eyeball, 0.03f );
float3 cq = hq - make_float3(0.1f, 0.34f, 0.08f);
float2 cqxy = make_float2(cq.x, cq.y);
mat2 CQ = make_mat2(0.8f, 0.6f, -0.6f, 0.8f);
cqxy = multi_f22_f2(CQ, cqxy);
cq.x = cqxy.x;
cq.y = cqxy.y;

d = sdEllipsoid( cq, make_float3(0.06f, 0.03f, 0.03f) );
res.x = smin( res.x, d, 0.03f );

float eo = 1.0f - 0.5f * smoothstep(0.01f, 0.04f, length((make_float2(hq.x, hq.y) - make_float2(0.095f, 0.285f)) * make_float2(1.0f, 1.1f)));
res = opU( res, make_float4(sdSphere(hq - make_float3(0.08f, 0.28f, 0.08f), 0.060f), 3.0f, 0.0f, eo));
res = opU( res, make_float4(sdSphere(hq - make_float3(0.075f, 0.28f, 0.102f), 0.0395f), 4.0f, 0.0f, 1.0f));
}
}

float fh = -0.1f - 0.05f * (_sinf(pos.x * 2.0f) + _sinf(pos.z * 2.0f));
float t5f = _fract(atime + 0.05f);
float t5i = _floorf(atime + 0.05f); 
float bt4 = _fabs(_fract(t5i * 0.5f) - 0.5f) / 0.5f;
float2 bcen = make_float2( 0.5f * (-1.0f + 2.0f * bt4), t5i + _powf(t5f, 0.7f) - 1.0f );

float k = length(make_float2(pos.x, pos.z) - bcen);
float tt = t5f * 15.0f - 6.2831f - k * 3.0f;
fh -= 0.1f * _expf(-k * k) * _sinf(tt) * _expf(-_fmaxf(tt, 0.0f) / 2.0f) * smoothstep(0.0f, 0.01f, t5f);
float d = pos.y - fh;

{
float3 vp = make_float3( _fmod(_fabs(pos.x), 3.0f) - 1.5f, pos.y, _fmod(pos.z + 1.5f, 3.0f) - 1.5f);
float2 id = make_float2( _floorf(pos.x / 3.0f), _floorf((pos.z + 1.5f) / 3.0f) );
float fid = id.x * 11.1f + id.y * 31.7f;
float fy = _fract(fid * 1.312f + atime * 0.1f);
float y = -1.0f + 4.0f * fy;
float3  rad = make_float3(0.7f, 1.0f + 0.5f * _sinf(fid), 0.7f);
rad -= 0.1f * (_sinf(pos.x * 3.0f) + _sinf(pos.y * 4.0f) + _sinf(pos.z * 5.0f));    
float siz = 4.0f * fy * (1.0f - fy);
float d2 = sdEllipsoid( vp - make_float3(0.5f, y, 0.0f), siz * rad );

d2 -= 0.03f * smoothstep(-1.0f, 1.0f, _sinf(18.0f * pos.x) + _sinf(18.0f * pos.y) + _sinf(18.0f * pos.z));
d2 *= 0.6f;
d2 = _fminf(d2, 2.0f);
d = smin( d, d2, 0.32f );
if( d < res.x ) { 
res = make_float4(d, 1.0f, 0.0f, 1.0f); 
hsha = _sqrtf(siz);
}
}

{
float fs = 5.0f;
float3 qos = fs * make_float3(pos.x, pos.y - fh, pos.z );
float2 id = make_float2( _floorf(qos.x + 0.5f), _floorf(qos.z + 0.5f) );
float3 vp = make_float3( _fract(qos.x + 0.5f) - 0.5f, qos.y, _fract(qos.z + 0.5f) - 0.5f);
float2 VP = 0.1f * _cosf2( id.x * 130.143f + id.y * 120.372f + make_float2(0.0f, 2.0f) );
vp.x += VP.x;
vp.z += VP.y;

float den = _sinf(id.x * 0.1f + _sinf(id.y * 0.091f)) + _sinf(id.y * 0.1f);
float fid = id.x * 0.143f + id.y * 0.372f;
float ra = smoothstep(0.0f, 0.1f, den * 0.1f + _fract(fid) - 0.95f);
d = sdSphere( vp, 0.35f * ra ) / fs;
if( d < res.x ) res = make_float4(d, 5.0f, qos.y, 1.0f);
}

return res;
}

__DEVICE__ float4 raycast( float3 ro, float3 rd, float time ) {
float4 res = make_float4(-1.0f, -1.0f, 0.0f, 1.0f);
float tmin = 0.5f;
float tmax = 20.0f;
float tp = (3.5f - ro.y) / rd.y;
if( tp > 0.0f ) tmax = _fminf(tmax, tp);
float t = tmin;
for( int i = 0; i < 256 && t < tmax; i++ ) {
float4 h = map( ro + rd * t, time );
if( _fabs(h.x) < (0.0005f * t) ) { 
res = make_float4(t, h.y, h.z, h.w); 
break;
}
t += h.x;
}
return res;
}

__DEVICE__ float calcSoftshadow( float3 ro, float3 rd, float time ) {
float res = 1.0f;
float tmax = 12.0f;
float tp = (3.5f - ro.y) / rd.y;
if( tp > 0.0f ) tmax = _fminf( tmax, tp );
float t = 0.02f;
for( int i = 0; i < 50; i++ ) {
float h = map( ro + rd * t, time ).x;
res = _fminf( res, _mix(1.0f, 16.0f * h / t, hsha) );
t += _clampf( h, 0.05f, 0.40f );
if( res < 0.005f || t > tmax ) break;
}
return _clampf( res, 0.0f, 1.0f );
}

__DEVICE__ float3 calcNormal( float3 pos, float time ) {
float2 e = make_float2(1.0f, -1.0f) * 0.5773f * 0.001f;
return normalize(make_float3(e.x, e.y, e.y) * map(pos + make_float3(e.x, e.y, e.y), time).x + 
make_float3(e.y, e.y, e.x) * map(pos + make_float3(e.y, e.y, e.x), time).x + 
make_float3(e.y, e.x, e.y) * map(pos + make_float3(e.y, e.x, e.y), time).x + 
make_float3(e.x, e.x, e.x) * map(pos + make_float3(e.x, e.x, e.x), time).x);
}

__DEVICE__ float calcOcclusion( float3 pos, float3 nor, float time ) {
float occ = 0.0f;
float sca = 1.0f;
for( int i = 0; i < 5; i++ ) {
float h = 0.01f + 0.11f * float(i) / 4.0f;
float3 opos = pos + h * nor;
float d = map( opos, time ).x;
occ += (h - d) * sca;
sca *= 0.95f;
}
return _clampf( 1.0f - 2.0f * occ, 0.0f, 1.0f );
}

__DEVICE__ float3 render( float3 ro, float3 rd, float time, float3 hsv ) { 
float3 col = make_float3(0.5f, 0.8f, 0.9f) - _fmaxf(rd.y, 0.0f) * 0.5f;
float2 uv;
uv.x = 1.5f * rd.x / rd.y;
uv.y = 1.5f * rd.z / rd.y;
float cl  = 1.0f * (_sinf(uv.x) + _sinf(uv.y));
uv = multi_f2_f22(uv, make_mat2(0.8 * 2.1, 0.6 * 2.1, -0.6 * 2.1, 0.8 * 2.1));
cl += 0.5f * (_sinf(uv.x) + _sinf(uv.y));
col += 0.1f * (-1.0f + 2.0f * smoothstep(-0.1f, 0.1f, cl - 0.4f));
col = _mix( col, make_float3(0.5f, 0.7f, 0.9f), _expf(-10.0f * _fmaxf(rd.y, 0.0f)) );    

float4 res = raycast(ro, rd, time);
if( res.y > -0.5f ) {
float t = res.x;
float3 pos = ro + t * rd;
float3 nor = calcNormal( pos, time );
float3 ref = reflect( rd, nor );
float focc = res.w;

col = make_float3(0.2f, 0.2f, 0.2f);
float ks = 1.0f;

if( res.y > 4.5f ) { 
col = make_float3(0.14f, 0.048f, 0.0f); 
float2 id;
id.x = _floorf(5.0f * pos.x + 0.5f);
id.y = _floorf(5.0f * pos.z + 0.5f);
col += 0.036f * _cosf3((id.x * 11.1f + id.y * 37.341f) + make_float3(0.0f, 1.0f, 2.0f) );
col = _fmaxf3(col, 0.0f);
focc = _clampf(4.0f * res.z, 0.0f, 1.0f);
}
else if( res.y > 3.5f )
{ 
col = make_float3(0.0f, 0.0f, 0.0f);
} 
else if( res.y > 2.5f )
{ 
col = make_float3(0.4f, 0.4f, 0.4f);
} 
else if( res.y > 1.5f )
{ 
col = _mix(make_float3(0.144f, 0.09f, 0.0036f), make_float3(0.36f, 0.1f, 0.04f), res.z * res.z);
col = _mix(col, make_float3(0.14f, 0.09f, 0.06f) * 2.0f, (1.0f - res.z) * smoothstep(-0.15f, 0.15f, -href));
if(hsv.x > 0.0f || hsv.y != 1.0f || hsv.z != 1.0f){
col = RGB_to_HSV(col);
col = make_float3(col.x + hsv.x, col.y * hsv.y, col.z * hsv.z);
col = HSV_to_RGB(col);
}
}
else
{
col = make_float3(0.05f, 0.09f, 0.02f);
float f = 0.2f * (-1.0f + 2.0f * smoothstep(-0.2f, 0.2f, _sinf(18.0f * pos.x) + _sinf(18.0f * pos.y) + _sinf(18.0f * pos.z)));
col += f * make_float3(0.06f, 0.06f, 0.02f);
ks = 0.5f + pos.y * 0.15f;

float2 mp = make_float2(pos.x - 0.5f * (_fmod(_floorf(pos.z + 0.5f), 2.0f) * 2.0f - 1.0f), _fract(pos.z + 0.5f) - 0.5f );
float mark = 1.0f - smoothstep(0.1f, 0.5f, length(mp));
mark *= smoothstep(0.0f, 0.1f, _floorf(time) - _floorf(pos.z + 0.5f) );
col *= _mix( make_float3(1.0f, 1.0f, 1.0f), make_float3(0.5f, 0.5f, 0.4f), mark );
ks *= 1.0f - 0.5f * mark;
}

float occ = calcOcclusion( pos, nor, time ) * focc;
float fre = _clampf(1.0f + dot(nor,rd), 0.0f, 1.0f);

float3 sun_lig = normalize( make_float3(0.6f, 0.35f, 0.5f) );
float sun_dif = _clampf(dot( nor, sun_lig ), 0.0f, 1.0f );
float3 sun_hal = normalize( sun_lig - rd );
float sun_sha = calcSoftshadow( pos, sun_lig, time );
float sun_spe = ks * _powf(_clampf(dot(nor, sun_hal), 0.0f, 1.0f), 8.0f) * sun_dif * (0.04f + 0.96f * _powf(_clampf(1.0f + dot(sun_hal, rd), 0.0f, 1.0f), 5.0f));
float sky_dif = _sqrtf(_clampf( 0.5f + 0.5f * nor.y, 0.0f, 1.0f ));
float sky_spe = ks * smoothstep( 0.0f, 0.5f, ref.y ) * (0.04f + 0.96f * _powf(fre, 4.0f));
float bou_dif = _sqrtf(_clampf( 0.1f - 0.9f * nor.y, 0.0f, 1.0f )) * _clampf(1.0f - 0.1f * pos.y, 0.0f, 1.0f);
float bac_dif = _clampf(0.1f + 0.9f * dot( nor, normalize(make_float3(-sun_lig.x, 0.0f, -sun_lig.z))), 0.0f, 1.0f );
float sss_dif = fre * sky_dif * (0.25f + 0.75f * sun_dif * sun_sha);

float3 lin = make_float3(0.0f, 0.0f, 0.0f);
lin += sun_dif * make_float3(8.10f, 6.00f, 4.20f) * make_float3(sun_sha, sun_sha * sun_sha * 0.5f + 0.5f * sun_sha, sun_sha * sun_sha);
lin += sky_dif * make_float3(0.50f, 0.70f, 1.00f) * occ;
lin += bou_dif * make_float3(0.20f, 0.70f, 0.10f) * occ;
lin += bac_dif * make_float3(0.45f, 0.35f, 0.25f) * occ;
lin += sss_dif * make_float3(3.25f, 2.75f, 2.50f) * occ;
col = col * lin;
col += sun_spe * make_float3(9.90f, 8.10f, 6.30f) * sun_sha;
col += sky_spe * make_float3(0.20f, 0.30f, 0.65f) * occ * occ;

col = _powf3(col, make_float3(0.8f, 0.9f, 1.0f) );
col = _mix(col, make_float3(0.5f, 0.7f, 0.9f), 1.0f - _expf( -0.0001f * t * t * t ) );
}
return col;
}

__DEVICE__ mat3 setCamera( float3 ro, float3 ta, float cr ) {
float3 cw = normalize(ta - ro);
float3 cp = make_float3(_sinf(cr), _cosf(cr), 0.0f);
float3 cu = normalize(cross(cw, cp) );
float3 cv = cross(cu, cw);
return make_mat3_f3(cu, cv, cw);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float width = (float)p_Width;
float height = (float)p_Height;
float X = (float)p_X;
float Y = height - (float)p_Y;
float2 iResolution = make_float2(width, height);
float2 fragCoord = make_float2(X, Y);

iTime = TIME * 55.0f;
if(SAT > 1.0f) SAT = (SAT - 1.0f) * 0.2f + 1.0f;
float3 HSV = make_float3(HUE, SAT, LUM);

float3 tot = make_float3(0.0f, 0.0f, 0.0f);
for( float m = 0.0f; m < 2.0f; m++ )
for( float n = 0.0f; n < 2.0f; n++ )
{
float2 o = make_float2(m, n) / 1.5f;
float2 p = (-iResolution + 2.0f * (fragCoord + o)) / iResolution.y;
float d = 0.5f + 0.5f * _sinf(fragCoord.x * 147.0f) * _sinf(fragCoord.y * 131.0f);
float time = iTime - 0.5f * (1.0f / 24.0f) * ((m * 2.0f + n) + d) / 4.0f;
time += -2.6f;
time *= 0.9f;

float cl = _sinf(0.5f * time);
float an = 1.57f + 0.7f * _sinf(0.15f * time);
float3 ta = make_float3(0.0f, 0.65f, -0.6f + time * 1.0f - 0.4f * cl);
float3 ro = ta + make_float3(1.3f * _cosf(an), -0.25f, 1.3f * _sinf(an));
float ti = _fract(time - 0.15f);
ti = 4.0f * ti * (1.0f - ti);        
ta.y += 0.15f * ti * ti * (3.0f - 2.0f * ti) * smoothstep(0.4f, 0.9f, cl);

float t4 = _fabs(_fract(time * 0.5f) - 0.5f) / 0.5f;
float bou = -1.0f + 2.0f * t4;
ro += 0.06f * _sinf3(time * 12.0f + make_float3(0.0f, 2.0f, 4.0f)) * smoothstep(0.85f, 1.0f, _fabs(bou));

ro.x += PARAM1 * 10.0f;
mat3 ca = setCamera(ro, ta, 0.0f);
float3 rd = multi_f3_f33(normalize( make_float3(p.x, p.y, 1.8f + PARAM2)), ca);
float3 col = render(ro, rd, time, HSV);

href = 0.0f;
hsha = 0.0f;
time = 0.0f;

col = col * make_float3(1.11f, 0.89f, 0.79f);
col = 1.35f * col / (1.0f + col);
col = _powf3_f( col, 0.4545f);
tot += col;
}
tot /= 4.0f;

tot = _clampf3(tot, 0.0f, 1.0f);
tot = tot * tot * (3.0f - 2.0f * tot);

float2 q = fragCoord / iResolution;
tot *= 0.5f + 0.5f * _powf(16.0f * q.x * q.y * (1.0f - q.x) * (1.0f - q.y), 0.25f);

return tot;
}